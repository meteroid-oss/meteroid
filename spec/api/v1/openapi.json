{
  "openapi": "3.1.0",
  "info": {
    "title": "meteroid",
    "description": "",
    "license": {
      "name": "AGPL-3.0-only",
      "identifier": "AGPL-3.0-only"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/customers": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "List customers",
        "description": "List customers with optional pagination and search filtering.",
        "operationId": "list_customers",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Specifies the max number of results in a page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "minimum": 1
            },
            "example": 20
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to return, starting at index 0",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 0
          },
          {
            "name": "search",
            "in": "query",
            "description": "Filter customers by search term (part of name, alias or email)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of customers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Create customer",
        "operationId": "create_customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Customer already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/customers/{id_or_alias}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get customer",
        "description": "Retrieve a single customer by ID or alias.",
        "operationId": "get_customer",
        "parameters": [
          {
            "name": "id_or_alias",
            "in": "path",
            "description": "customer ID or alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Update customer",
        "operationId": "update_customer",
        "parameters": [
          {
            "name": "id_or_alias",
            "in": "path",
            "description": "customer ID or alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "customer"
        ],
        "summary": "Archive a customer",
        "description": "No linked entity will be deleted. You need to terminate all active subscriptions before archiving a customer, or the call will fail.",
        "operationId": "archive_customer",
        "parameters": [
          {
            "name": "id_or_alias",
            "in": "path",
            "description": "customer ID or alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/customers/{id_or_alias}/unarchive": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Restore an archived customer",
        "operationId": "unarchive_customer",
        "parameters": [
          {
            "name": "id_or_alias",
            "in": "path",
            "description": "customer ID or alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/events/ingest": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Ingest events",
        "description": "Ingest usage events for metering and billing purposes.",
        "operationId": "ingest_events",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestEventsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Events ingested successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestEventsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/invoices": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "List invoices",
        "description": "List invoices with optional filtering by customer, subscription, or status.",
        "operationId": "list_invoices",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Specifies the max number of results in a page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "minimum": 1
            },
            "example": 20
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to return, starting at index 0",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 0
          },
          {
            "name": "customer_id",
            "in": "query",
            "description": "Filter by customer ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CustomerId"
            },
            "example": "cust_123"
          },
          {
            "name": "subscription_id",
            "in": "query",
            "description": "Filter by subscription ID",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SubscriptionId"
            },
            "example": "sub_123"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by invoice status",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InvoiceStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/invoices/{invoice_id}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Get invoice",
        "description": "Retrieve a single invoice with its payment transactions.",
        "operationId": "get_invoice_by_id",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InvoiceId"
            },
            "example": "inv_123"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/invoices/{invoice_id}/download": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Download invoice PDF",
        "description": "Download the PDF document for an invoice.",
        "operationId": "download_invoice_pdf",
        "parameters": [
          {
            "name": "invoice_id",
            "in": "path",
            "description": "Invoice ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InvoiceId"
            },
            "example": "inv_123"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice PDF",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found or PDF not available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/plans": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "List plans",
        "description": "List plans with optional filtering by product family.",
        "operationId": "list_plans",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Specifies the starting position of the results",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "example": 0
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "The maximum number of objects to return",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1
            },
            "example": 10
          },
          {
            "name": "product_family_id",
            "in": "query",
            "description": "Filter by a product family",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ProductFamilyId"
            },
            "example": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "List of plans",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal error"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/plans/{plan_id}": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "Get plan",
        "description": "Retrieve the details of a specific plan",
        "operationId": "get_plan_details",
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "description": "Plan ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlanId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Plan not found"
          },
          "500": {
            "description": "Internal error"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/product_families": {
      "get": {
        "tags": [
          "product_family"
        ],
        "summary": "List product families",
        "operationId": "list_product_families",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Specifies the max number of results in a page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "minimum": 1
            },
            "example": 20
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to return, starting at index 0",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of product families",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamilyListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal error"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "product_family"
        ],
        "summary": "Create product family",
        "operationId": "create_product_family",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductFamilyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamily"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal error"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/product_families/{id_or_alias}": {
      "get": {
        "tags": [
          "product_family"
        ],
        "summary": "Get product family",
        "description": "Retrieve a single product family by ID or alias.",
        "operationId": "get_product_family_by_id_or_alias",
        "parameters": [
          {
            "name": "id_or_alias",
            "in": "path",
            "description": "product_family ID or alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProductFamily",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFamily"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal error"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/subscriptions": {
      "get": {
        "tags": [
          "subscription"
        ],
        "summary": "List subscriptions",
        "description": "List subscriptions with optional filtering by customer or plan.",
        "operationId": "list_subscriptions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Specifies the starting position of the results",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "example": 0
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "The maximum number of objects to return",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1
            },
            "example": 10
          },
          {
            "name": "customer_id",
            "in": "query",
            "description": "Filter by customer ID",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CustomerId"
            }
          },
          {
            "name": "plan_id",
            "in": "query",
            "description": "Filter by plan ID",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PlanId"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by subscription status(es)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscriptionStatusEnum"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "subscription"
        ],
        "summary": "Create subscription",
        "description": "Create a new subscription for a customer with a specific plan.",
        "operationId": "create_subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subscription successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/subscriptions/{id}": {
      "get": {
        "tags": [
          "subscription"
        ],
        "summary": "Get subscription details",
        "description": "Retrieve detailed information about a subscription including price components and schedules.",
        "operationId": "subscription_details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "subscription ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SubscriptionId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1/subscriptions/{subscription_id}/cancel": {
      "post": {
        "tags": [
          "subscription"
        ],
        "summary": "Cancel subscription",
        "description": "Cancel a subscription either immediately or at the end of the billing period.",
        "operationId": "cancel_subscription",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SubscriptionId"
            },
            "example": "sub_123"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Subscription canceled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelSubscriptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddOnId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "add_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "city": {
            "type": [
              "string",
              "null"
            ]
          },
          "country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryCode"
              }
            ]
          },
          "line1": {
            "type": [
              "string",
              "null"
            ]
          },
          "line2": {
            "type": [
              "string",
              "null"
            ]
          },
          "state": {
            "type": [
              "string",
              "null"
            ]
          },
          "zip_code": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "AppliedCoupon": {
        "type": "object",
        "required": [
          "id",
          "coupon_id",
          "is_active",
          "created_at"
        ],
        "properties": {
          "applied_amount": {
            "type": [
              "string",
              "null"
            ],
            "format": "decimal"
          },
          "applied_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "coupon_id": {
            "$ref": "#/components/schemas/CouponId"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "$ref": "#/components/schemas/AppliedCouponId"
          },
          "is_active": {
            "type": "boolean"
          },
          "last_applied_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        }
      },
      "AppliedCouponDetailed": {
        "type": "object",
        "required": [
          "coupon",
          "applied_coupon"
        ],
        "properties": {
          "applied_coupon": {
            "$ref": "#/components/schemas/AppliedCoupon"
          },
          "coupon": {
            "$ref": "#/components/schemas/Coupon"
          }
        }
      },
      "AppliedCouponId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "sub_cou_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "AvailableParameters": {
        "type": "object",
        "properties": {
          "billing_periods": {
            "type": "object",
            "description": "Map of component_id -> available billing periods (e.g., \"MONTHLY\", \"ANNUAL\")",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BillingPeriodEnum"
              }
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "capacity_thresholds": {
            "type": "object",
            "description": "Map of component_id -> available capacity values",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              }
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "slot_components": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of component_ids that support slot parametrization (initial slot count)"
          }
        }
      },
      "BankAccountId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "ba_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "BillableMetricId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "bm_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "BillingPeriodEnum": {
        "type": "string",
        "enum": [
          "MONTHLY",
          "QUARTERLY",
          "ANNUAL"
        ]
      },
      "BillingType": {
        "type": "string",
        "enum": [
          "ADVANCE",
          "ARREARS"
        ]
      },
      "BillingTypeEnum": {
        "type": "string",
        "enum": [
          "ADVANCE",
          "ARREARS"
        ]
      },
      "CancelSubscriptionRequest": {
        "type": "object",
        "properties": {
          "effective_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date",
            "description": "If not provided, the cancellation will be effective at the end of the current billing or committed period."
          },
          "reason": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "CancelSubscriptionResponse": {
        "type": "object",
        "required": [
          "subscription"
        ],
        "properties": {
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          }
        }
      },
      "CapacityThreshold": {
        "type": "object",
        "required": [
          "included_amount",
          "price",
          "per_unit_overage"
        ],
        "properties": {
          "included_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "per_unit_overage": {
            "type": "number",
            "format": "double"
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ComponentOverride": {
        "type": "object",
        "required": [
          "component_id",
          "component"
        ],
        "properties": {
          "component": {
            "$ref": "#/components/schemas/SubscriptionComponent"
          },
          "component_id": {
            "$ref": "#/components/schemas/PriceComponentId"
          }
        }
      },
      "ComponentParameterization": {
        "type": "object",
        "required": [
          "component_id",
          "parameters"
        ],
        "properties": {
          "component_id": {
            "$ref": "#/components/schemas/PriceComponentId"
          },
          "parameters": {
            "$ref": "#/components/schemas/ComponentParameters"
          }
        }
      },
      "ComponentParameters": {
        "type": "object",
        "properties": {
          "billing_period": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BillingPeriodEnum"
              }
            ]
          },
          "committed_capacity": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "initial_slot_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "CountryCode": {
        "type": "string",
        "format": "CountryCode",
        "examples": [
          "US",
          "GB",
          "FR"
        ]
      },
      "Coupon": {
        "type": "object",
        "required": [
          "id",
          "code",
          "description",
          "discount",
          "reusable",
          "disabled"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "discount": {
            "$ref": "#/components/schemas/CouponDiscount"
          },
          "expires_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "id": {
            "$ref": "#/components/schemas/CouponId"
          },
          "recurring_value": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "redemption_limit": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "reusable": {
            "type": "boolean"
          }
        }
      },
      "CouponDiscount": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "percentage",
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string",
                "enum": [
                  "PERCENTAGE"
                ]
              },
              "percentage": {
                "type": "string",
                "format": "decimal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "currency",
              "amount",
              "discriminator"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal"
              },
              "currency": {
                "type": "string"
              },
              "discriminator": {
                "type": "string",
                "enum": [
                  "FIXED"
                ]
              }
            }
          }
        ]
      },
      "CouponId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "cou_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "CouponLineItem": {
        "type": "object",
        "required": [
          "coupon_id",
          "name",
          "total"
        ],
        "properties": {
          "coupon_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateSubscriptionAddOn": {
        "type": "object",
        "required": [
          "add_on_id"
        ],
        "properties": {
          "add_on_id": {
            "$ref": "#/components/schemas/AddOnId"
          },
          "customization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SubscriptionAddOnCustomization"
              }
            ]
          }
        }
      },
      "CreateSubscriptionComponents": {
        "type": "object",
        "properties": {
          "extra_components": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ExtraComponent"
            }
          },
          "overridden_components": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ComponentOverride"
            }
          },
          "parameterized_components": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ComponentParameterization"
            }
          },
          "remove_components": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PriceComponentId"
            }
          }
        }
      },
      "Currency": {
        "type": "string",
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHF",
          "CLP",
          "CNH",
          "CNY",
          "COP",
          "CRC",
          "CUC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ERN",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRU",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHP",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STD",
          "STN",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "UYU",
          "UZS",
          "VES",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XCD",
          "XOF",
          "XPF",
          "YER",
          "ZAR",
          "ZMW",
          "ZWL"
        ]
      },
      "Customer": {
        "type": "object",
        "required": [
          "id",
          "name",
          "invoicing_emails",
          "currency",
          "invoicing_entity_id"
        ],
        "properties": {
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "bank_account_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankAccountId"
              }
            ]
          },
          "billing_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "billing_email": {
            "type": [
              "string",
              "null"
            ]
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "custom_tax_rate": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "id": {
            "$ref": "#/components/schemas/CustomerId"
          },
          "invoicing_emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "invoicing_entity_id": {
            "$ref": "#/components/schemas/InvoicingEntityId"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": [
              "string",
              "null"
            ]
          },
          "shipping_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ShippingAddress"
              }
            ]
          },
          "vat_number": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "CustomerCreateRequest": {
        "type": "object",
        "required": [
          "name",
          "invoicing_emails",
          "currency"
        ],
        "properties": {
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "bank_account_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankAccountId"
              }
            ]
          },
          "billing_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "billing_email": {
            "type": [
              "string",
              "null"
            ]
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "custom_tax_rate": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "invoicing_emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "invoicing_entity_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/InvoicingEntityId"
              }
            ]
          },
          "is_tax_exempt": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": [
              "string",
              "null"
            ]
          },
          "shipping_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ShippingAddress"
              }
            ]
          },
          "vat_number": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "CustomerDetails": {
        "type": "object",
        "required": [
          "id",
          "name",
          "snapshot_at"
        ],
        "properties": {
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "billing_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "email": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/CustomerId"
          },
          "name": {
            "type": "string"
          },
          "snapshot_at": {
            "type": "string",
            "format": "date-time"
          },
          "vat_number": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "CustomerId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "cus_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "CustomerListResponse": {
        "type": "object",
        "required": [
          "data",
          "pagination_meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "pagination_meta": {
            "$ref": "#/components/schemas/PaginationResponse"
          }
        }
      },
      "CustomerPaymentMethodId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "pm_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "CustomerUpdateRequest": {
        "type": "object",
        "required": [
          "name",
          "invoicing_emails",
          "currency",
          "invoicing_entity_id"
        ],
        "properties": {
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "bank_account_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankAccountId"
              }
            ]
          },
          "billing_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "billing_email": {
            "type": [
              "string",
              "null"
            ]
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "custom_tax_rate": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "invoicing_emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "invoicing_entity_id": {
            "$ref": "#/components/schemas/InvoicingEntityId"
          },
          "is_tax_exempt": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": [
              "string",
              "null"
            ]
          },
          "shipping_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ShippingAddress"
              }
            ]
          },
          "vat_number": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ErrorCode": {
        "type": "string",
        "enum": [
          "BAD_REQUEST",
          "NOT_FOUND",
          "CONFLICT",
          "FORBIDDEN",
          "UNAUTHORIZED",
          "INTERNAL_SERVER_ERROR"
        ]
      },
      "Event": {
        "type": "object",
        "required": [
          "event_id",
          "code",
          "customer_id",
          "timestamp"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "customer_id": {
            "type": "string",
            "description": "Either Meteroid's customer_id or an alias"
          },
          "event_id": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "ExtraComponent": {
        "type": "object",
        "required": [
          "component"
        ],
        "properties": {
          "component": {
            "$ref": "#/components/schemas/SubscriptionComponent"
          }
        }
      },
      "Fee": {
        "oneOf": [
          {
            "type": "object",
            "description": "Recurring rate fee (e.g., monthly subscription)",
            "required": [
              "rates",
              "fee_type"
            ],
            "properties": {
              "fee_type": {
                "type": "string",
                "enum": [
                  "rate"
                ]
              },
              "rates": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermRate"
                }
              }
            }
          },
          {
            "type": "object",
            "description": "Slot-based fee (e.g., per-seat pricing)",
            "required": [
              "rates",
              "slot_unit_name",
              "fee_type"
            ],
            "properties": {
              "fee_type": {
                "type": "string",
                "enum": [
                  "slot"
                ]
              },
              "minimum_count": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32",
                "minimum": 0
              },
              "quota": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32",
                "minimum": 0
              },
              "rates": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermRate"
                }
              },
              "slot_unit_name": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "description": "Capacity-based fee with included committed usage and overage",
            "required": [
              "metric_id",
              "thresholds",
              "fee_type"
            ],
            "properties": {
              "fee_type": {
                "type": "string",
                "enum": [
                  "capacity"
                ]
              },
              "metric_id": {
                "$ref": "#/components/schemas/BillableMetricId"
              },
              "thresholds": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CapacityThreshold"
                }
              }
            }
          },
          {
            "type": "object",
            "description": "Usage-based fee",
            "required": [
              "metric_id",
              "pricing",
              "fee_type"
            ],
            "properties": {
              "fee_type": {
                "type": "string",
                "enum": [
                  "usage"
                ]
              },
              "metric_id": {
                "$ref": "#/components/schemas/BillableMetricId"
              },
              "pricing": {
                "$ref": "#/components/schemas/UsagePricingModel"
              }
            }
          },
          {
            "type": "object",
            "description": "Extra recurring fee",
            "required": [
              "unit_price",
              "quantity",
              "billing_type",
              "cadence",
              "fee_type"
            ],
            "properties": {
              "billing_type": {
                "$ref": "#/components/schemas/BillingType"
              },
              "cadence": {
                "$ref": "#/components/schemas/BillingPeriodEnum"
              },
              "fee_type": {
                "type": "string",
                "enum": [
                  "extra_recurring"
                ]
              },
              "quantity": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "unit_price": {
                "type": "number",
                "format": "double"
              }
            }
          },
          {
            "type": "object",
            "description": "One-time fee",
            "required": [
              "unit_price",
              "quantity",
              "fee_type"
            ],
            "properties": {
              "fee_type": {
                "type": "string",
                "enum": [
                  "one_time"
                ]
              },
              "quantity": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "unit_price": {
                "type": "number",
                "format": "double"
              }
            }
          }
        ]
      },
      "IngestEventsRequest": {
        "type": "object",
        "required": [
          "events"
        ],
        "properties": {
          "allow_backfilling": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "allow ingesting events with timestamps more than a day in the past"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "IngestEventsResponse": {
        "type": "object",
        "properties": {
          "failures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngestFailure"
            }
          }
        }
      },
      "IngestFailure": {
        "type": "object",
        "required": [
          "event_id",
          "reason"
        ],
        "properties": {
          "event_id": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "Invoice": {
        "type": "object",
        "required": [
          "id",
          "invoice_number",
          "status",
          "customer_id",
          "currency",
          "invoice_date",
          "subtotal",
          "subtotal_recurring",
          "tax_amount",
          "total",
          "amount_due",
          "line_items",
          "tax_breakdown",
          "transactions",
          "payment_status",
          "customer_details",
          "applied_credits",
          "coupons",
          "invoice_type",
          "net_terms",
          "created_at"
        ],
        "properties": {
          "amount_due": {
            "type": "integer",
            "format": "int64"
          },
          "applied_credits": {
            "type": "integer",
            "format": "int64"
          },
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponLineItem"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "customer_details": {
            "$ref": "#/components/schemas/CustomerDetails"
          },
          "customer_id": {
            "$ref": "#/components/schemas/CustomerId"
          },
          "due_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "finalized_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "id": {
            "$ref": "#/components/schemas/InvoiceId"
          },
          "invoice_date": {
            "type": "string",
            "format": "date"
          },
          "invoice_number": {
            "type": "string"
          },
          "invoice_type": {
            "$ref": "#/components/schemas/InvoiceType"
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItem"
            }
          },
          "marked_as_uncollectible_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "memo": {
            "type": [
              "string",
              "null"
            ]
          },
          "net_terms": {
            "type": "integer",
            "format": "int32"
          },
          "paid_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "payment_status": {
            "$ref": "#/components/schemas/InvoicePaymentStatus"
          },
          "purchase_order": {
            "type": [
              "string",
              "null"
            ]
          },
          "reference": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "subscription_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SubscriptionId"
              }
            ]
          },
          "subtotal": {
            "type": "integer",
            "format": "int64"
          },
          "subtotal_recurring": {
            "type": "integer",
            "format": "int64"
          },
          "tax_amount": {
            "type": "integer",
            "format": "int64"
          },
          "tax_breakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxBreakdownItem"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "voided_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        }
      },
      "InvoiceId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "inv_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "InvoiceLineItem": {
        "type": "object",
        "required": [
          "name",
          "amount_total",
          "start_date",
          "end_date",
          "tax_rate",
          "sub_line_items"
        ],
        "properties": {
          "amount_total": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "end_date": {
            "type": "string",
            "format": "date"
          },
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "start_date": {
            "type": "string",
            "format": "date"
          },
          "sub_line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubLineItem"
            }
          },
          "tax_rate": {
            "type": "string",
            "format": "decimal"
          },
          "unit_price": {
            "type": "string",
            "format": "decimal"
          }
        }
      },
      "InvoiceListResponse": {
        "type": "object",
        "required": [
          "data",
          "pagination_meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          },
          "pagination_meta": {
            "$ref": "#/components/schemas/PaginationResponse"
          }
        }
      },
      "InvoicePaymentStatus": {
        "type": "string",
        "enum": [
          "Unpaid",
          "PartiallyPaid",
          "Paid",
          "Errored"
        ]
      },
      "InvoiceStatus": {
        "type": "string",
        "enum": [
          "Draft",
          "Finalized",
          "Uncollectible",
          "Void"
        ]
      },
      "InvoiceType": {
        "type": "string",
        "enum": [
          "Recurring",
          "OneOff",
          "Adjustment",
          "UsageThreshold"
        ]
      },
      "InvoicingEntityId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "ive_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "MatrixDimension": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "MatrixRow": {
        "type": "object",
        "required": [
          "dimension1",
          "per_unit_price"
        ],
        "properties": {
          "dimension1": {
            "$ref": "#/components/schemas/MatrixDimension"
          },
          "dimension2": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MatrixDimension"
              }
            ]
          },
          "per_unit_price": {
            "type": "string",
            "format": "decimal"
          }
        }
      },
      "PaginationResponse": {
        "type": "object",
        "required": [
          "page",
          "per_page",
          "total_items",
          "total_pages"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "total_items": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "total_pages": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "PaymentMethodInfo": {
        "type": "object",
        "required": [
          "payment_method_type"
        ],
        "properties": {
          "account_number_hint": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_brand": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_last4": {
            "type": [
              "string",
              "null"
            ]
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodTypeEnum"
          }
        }
      },
      "PaymentMethodTypeEnum": {
        "type": "string",
        "enum": [
          "Card",
          "BankTransfer",
          "Wallet",
          "Other"
        ]
      },
      "PaymentStatusEnum": {
        "type": "string",
        "enum": [
          "Ready",
          "Pending",
          "Settled",
          "Cancelled",
          "Failed"
        ]
      },
      "PaymentTransactionId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "pay_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "PaymentTypeEnum": {
        "type": "string",
        "enum": [
          "Payment",
          "Refund"
        ]
      },
      "Plan": {
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "plan_type",
          "status",
          "product_family",
          "version_id",
          "version",
          "currency",
          "net_terms",
          "price_components",
          "available_parameters"
        ],
        "properties": {
          "available_parameters": {
            "$ref": "#/components/schemas/AvailableParameters"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/PlanId"
          },
          "name": {
            "type": "string"
          },
          "net_terms": {
            "type": "integer",
            "format": "int32"
          },
          "plan_type": {
            "$ref": "#/components/schemas/PlanTypeEnum"
          },
          "price_components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceComponent"
            }
          },
          "product_family": {
            "$ref": "#/components/schemas/ProductFamily"
          },
          "status": {
            "$ref": "#/components/schemas/PlanStatusEnum"
          },
          "trial": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TrialConfig"
              }
            ]
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "version_id": {
            "$ref": "#/components/schemas/PlanVersionId"
          }
        }
      },
      "PlanId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "plan_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "PlanListResponse": {
        "type": "object",
        "required": [
          "data",
          "pagination_meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Plan"
            }
          },
          "pagination_meta": {
            "$ref": "#/components/schemas/PaginationResponse"
          }
        }
      },
      "PlanStatusEnum": {
        "type": "string",
        "enum": [
          "DRAFT",
          "ACTIVE",
          "INACTIVE",
          "ARCHIVED"
        ]
      },
      "PlanTypeEnum": {
        "type": "string",
        "enum": [
          "STANDARD",
          "FREE",
          "CUSTOM"
        ]
      },
      "PlanVersionId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "plv_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "PriceComponent": {
        "type": "object",
        "required": [
          "id",
          "name",
          "fee"
        ],
        "properties": {
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "id": {
            "$ref": "#/components/schemas/PriceComponentId"
          },
          "name": {
            "type": "string"
          },
          "product_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ProductId"
              }
            ]
          }
        }
      },
      "PriceComponentId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "price_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "ProductFamily": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ProductFamilyId"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ProductFamilyCreateRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ProductFamilyId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "pf_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "ProductFamilyListResponse": {
        "type": "object",
        "required": [
          "data",
          "pagination_meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFamily"
            }
          },
          "pagination_meta": {
            "$ref": "#/components/schemas/PaginationResponse"
          }
        }
      },
      "ProductId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "prd_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "RestErrorResponse": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ShippingAddress": {
        "type": "object",
        "required": [
          "same_as_billing"
        ],
        "properties": {
          "address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "same_as_billing": {
            "type": "boolean"
          }
        }
      },
      "SubLineItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "total",
          "quantity",
          "unit_price"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "string",
            "format": "decimal"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "unit_price": {
            "type": "string",
            "format": "decimal"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "customer_name",
          "billing_day_anchor",
          "currency",
          "plan_id",
          "plan_name",
          "plan_version_id",
          "plan_version",
          "status",
          "current_period_start",
          "auto_advance_invoices",
          "charge_automatically"
        ],
        "properties": {
          "auto_advance_invoices": {
            "type": "boolean"
          },
          "billing_day_anchor": {
            "type": "integer",
            "format": "int32"
          },
          "charge_automatically": {
            "type": "boolean"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "current_period_end": {
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "current_period_start": {
            "type": "string",
            "format": "date"
          },
          "customer_alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "customer_id": {
            "$ref": "#/components/schemas/CustomerId"
          },
          "customer_name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/SubscriptionId"
          },
          "plan_id": {
            "$ref": "#/components/schemas/PlanId"
          },
          "plan_name": {
            "type": "string"
          },
          "plan_version": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "plan_version_id": {
            "$ref": "#/components/schemas/PlanVersionId"
          },
          "purchase_order": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatusEnum"
          }
        }
      },
      "SubscriptionActivationConditionEnum": {
        "type": "string",
        "enum": [
          "ON_START",
          "ON_CHECKOUT",
          "MANUAL"
        ]
      },
      "SubscriptionAddOn": {
        "type": "object",
        "required": [
          "name",
          "period",
          "fee"
        ],
        "properties": {
          "add_on_id": {
            "$ref": "#/components/schemas/AddOnId"
          },
          "fee": {
            "$ref": "#/components/schemas/SubscriptionFee"
          },
          "name": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/SubscriptionFeeBillingPeriodEnum"
          }
        }
      },
      "SubscriptionAddOnCustomization": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionAddOnOverride"
              },
              {
                "type": "object",
                "required": [
                  "discriminator"
                ],
                "properties": {
                  "discriminator": {
                    "type": "string",
                    "enum": [
                      "OVERRIDE"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionAddOnParameterization"
              },
              {
                "type": "object",
                "required": [
                  "discriminator"
                ],
                "properties": {
                  "discriminator": {
                    "type": "string",
                    "enum": [
                      "PARAMETERIZATION"
                    ]
                  }
                }
              }
            ]
          }
        ]
      },
      "SubscriptionAddOnOverride": {
        "type": "object",
        "required": [
          "name",
          "period",
          "fee"
        ],
        "properties": {
          "fee": {
            "$ref": "#/components/schemas/SubscriptionFee"
          },
          "name": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/SubscriptionFeeBillingPeriodEnum"
          }
        }
      },
      "SubscriptionAddOnParameterization": {
        "type": "object",
        "properties": {
          "billing_period": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BillingPeriodEnum"
              }
            ]
          },
          "committed_capacity": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "initial_slot_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "SubscriptionComponent": {
        "type": "object",
        "required": [
          "name",
          "period",
          "fee"
        ],
        "properties": {
          "fee": {
            "$ref": "#/components/schemas/SubscriptionFee"
          },
          "name": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/SubscriptionFeeBillingPeriodEnum"
          },
          "price_component_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PriceComponentId"
              }
            ]
          },
          "product_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ProductId"
              }
            ]
          }
        }
      },
      "SubscriptionCreateRequest": {
        "type": "object",
        "required": [
          "plan_id",
          "customer_id_or_alias",
          "start_date",
          "activation_condition"
        ],
        "properties": {
          "activation_condition": {
            "$ref": "#/components/schemas/SubscriptionActivationConditionEnum"
          },
          "add_ons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSubscriptionAddOn"
            }
          },
          "auto_advance_invoices": {
            "type": "boolean"
          },
          "billing_day_anchor": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "maximum": 32767,
            "minimum": 1
          },
          "charge_automatically": {
            "type": "boolean"
          },
          "coupon_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customer_id_or_alias": {
            "type": "string",
            "format": "CustomerId or customer alias"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "example": "2025-11-01"
          },
          "invoice_memo": {
            "type": "string"
          },
          "net_terms": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "plan_id": {
            "$ref": "#/components/schemas/PlanId"
          },
          "price_components": {
            "$ref": "#/components/schemas/CreateSubscriptionComponents"
          },
          "purchase_order": {
            "type": [
              "string",
              "null"
            ]
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "example": "2024-11-01"
          },
          "trial_days": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SubscriptionDetails": {
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "customer_name",
          "billing_day_anchor",
          "currency",
          "plan_id",
          "plan_name",
          "plan_version_id",
          "plan_version",
          "status",
          "current_period_start",
          "auto_advance_invoices",
          "charge_automatically",
          "components",
          "add_ons",
          "applied_coupons"
        ],
        "properties": {
          "add_ons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAddOn"
            }
          },
          "applied_coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppliedCouponDetailed"
            }
          },
          "auto_advance_invoices": {
            "type": "boolean"
          },
          "billing_day_anchor": {
            "type": "integer",
            "format": "int32"
          },
          "charge_automatically": {
            "type": "boolean"
          },
          "checkout_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionComponent"
            }
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "current_period_end": {
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "current_period_start": {
            "type": "string",
            "format": "date"
          },
          "customer_alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "customer_id": {
            "$ref": "#/components/schemas/CustomerId"
          },
          "customer_name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/SubscriptionId"
          },
          "plan_id": {
            "$ref": "#/components/schemas/PlanId"
          },
          "plan_name": {
            "type": "string"
          },
          "plan_version": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "plan_version_id": {
            "$ref": "#/components/schemas/PlanVersionId"
          },
          "purchase_order": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatusEnum"
          }
        }
      },
      "SubscriptionFee": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "rate",
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string",
                "enum": [
                  "RATE"
                ]
              },
              "rate": {
                "type": "string",
                "format": "decimal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rate",
              "quantity",
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string",
                "enum": [
                  "ONE_TIME"
                ]
              },
              "quantity": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "rate": {
                "type": "string",
                "format": "decimal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rate",
              "quantity",
              "billing_type",
              "discriminator"
            ],
            "properties": {
              "billing_type": {
                "$ref": "#/components/schemas/BillingTypeEnum"
              },
              "discriminator": {
                "type": "string",
                "enum": [
                  "RECURRING"
                ]
              },
              "quantity": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "rate": {
                "type": "string",
                "format": "decimal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rate",
              "included",
              "overage_rate",
              "metric_id",
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string",
                "enum": [
                  "CAPACITY"
                ]
              },
              "included": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "metric_id": {
                "$ref": "#/components/schemas/BillableMetricId"
              },
              "overage_rate": {
                "type": "string",
                "format": "decimal"
              },
              "rate": {
                "type": "string",
                "format": "decimal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "unit",
              "unit_rate",
              "initial_slots",
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string",
                "enum": [
                  "SLOT"
                ]
              },
              "initial_slots": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "max_slots": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32",
                "minimum": 0
              },
              "min_slots": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32",
                "minimum": 0
              },
              "unit": {
                "type": "string"
              },
              "unit_rate": {
                "type": "string",
                "format": "decimal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "metric_id",
              "model",
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string",
                "enum": [
                  "USAGE"
                ]
              },
              "metric_id": {
                "$ref": "#/components/schemas/BillableMetricId"
              },
              "model": {
                "$ref": "#/components/schemas/UsagePricingModel"
              }
            }
          }
        ]
      },
      "SubscriptionFeeBillingPeriodEnum": {
        "type": "string",
        "enum": [
          "ONE_TIME",
          "MONTHLY",
          "QUARTERLY",
          "ANNUAL"
        ]
      },
      "SubscriptionId": {
        "type": "string",
        "format": "MeteroidId",
        "examples": [
          "sub_7n42DGM5Tflk9n8mt7Fhc7"
        ]
      },
      "SubscriptionListResponse": {
        "type": "object",
        "required": [
          "data",
          "pagination_meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          },
          "pagination_meta": {
            "$ref": "#/components/schemas/PaginationResponse"
          }
        }
      },
      "SubscriptionStatusEnum": {
        "type": "string",
        "enum": [
          "PENDING_ACTIVATION",
          "PENDING_CHARGE",
          "TRIAL_ACTIVE",
          "ACTIVE",
          "TRIAL_EXPIRED",
          "PAUSED",
          "SUSPENDED",
          "CANCELLED",
          "COMPLETED",
          "SUPERSEDED"
        ]
      },
      "TaxBreakdownItem": {
        "type": "object",
        "required": [
          "taxable_amount",
          "tax_amount",
          "tax_rate",
          "name"
        ],
        "properties": {
          "exemption_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TaxExemptionType"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "tax_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "tax_rate": {
            "type": "string",
            "format": "decimal"
          },
          "taxable_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "TaxExemptionType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "ReverseCharge"
            ]
          },
          {
            "type": "string",
            "enum": [
              "TaxExempt"
            ]
          },
          {
            "type": "string",
            "enum": [
              "NotRegistered"
            ]
          },
          {
            "type": "object",
            "required": [
              "Other"
            ],
            "properties": {
              "Other": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TermRate": {
        "type": "object",
        "required": [
          "term",
          "price"
        ],
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "term": {
            "$ref": "#/components/schemas/BillingPeriodEnum"
          }
        }
      },
      "TierRow": {
        "type": "object",
        "required": [
          "first_unit",
          "rate",
          "flat_fee",
          "flat_cap"
        ],
        "properties": {
          "first_unit": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "flat_cap": {
            "type": "string",
            "format": "decimal"
          },
          "flat_fee": {
            "type": "string",
            "format": "decimal"
          },
          "rate": {
            "type": "string",
            "format": "decimal"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "required": [
          "id",
          "amount",
          "currency",
          "status",
          "payment_type"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "currency": {
            "type": "string"
          },
          "error": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/PaymentTransactionId"
          },
          "payment_method_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerPaymentMethodId"
              }
            ]
          },
          "payment_method_info": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodInfo"
              }
            ]
          },
          "payment_type": {
            "$ref": "#/components/schemas/PaymentTypeEnum"
          },
          "processed_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "provider_transaction_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatusEnum"
          }
        }
      },
      "TrialConfig": {
        "type": "object",
        "required": [
          "duration_days",
          "is_free"
        ],
        "properties": {
          "duration_days": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "is_free": {
            "type": "boolean"
          },
          "trialing_plan_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PlanId"
              }
            ]
          }
        }
      },
      "UsagePricingModel": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "rate",
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string",
                "enum": [
                  "PER_UNIT"
                ]
              },
              "rate": {
                "type": "string",
                "format": "decimal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tiers",
              "discriminator"
            ],
            "properties": {
              "block_size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "discriminator": {
                "type": "string",
                "enum": [
                  "TIERED"
                ]
              },
              "tiers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TierRow"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tiers",
              "discriminator"
            ],
            "properties": {
              "block_size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "discriminator": {
                "type": "string",
                "enum": [
                  "VOLUME"
                ]
              },
              "tiers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TierRow"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "block_size",
              "rate",
              "discriminator"
            ],
            "properties": {
              "block_size": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "discriminator": {
                "type": "string",
                "enum": [
                  "PACKAGE"
                ]
              },
              "rate": {
                "type": "string",
                "format": "decimal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rates",
              "discriminator"
            ],
            "properties": {
              "discriminator": {
                "type": "string",
                "enum": [
                  "MATRIX"
                ]
              },
              "rates": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatrixRow"
                }
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "meteroid",
      "description": "Meteroid API"
    }
  ]
}