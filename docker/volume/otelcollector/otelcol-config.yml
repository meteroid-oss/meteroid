receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
#      http:
#        endpoint: 0.0.0.0:4318
#        cors:
#          allowed_origins:
#            - "http://*"
#            - "https://*"
  prometheus:
    config:
      scrape_configs:
      - job_name: otel-collector-metrics
        scrape_interval: 10s
        static_configs:
          - targets: ['0.0.0.0:8888']
            
exporters:
  debug:
     verbosity: detailed
  otlp:
    endpoint: "jaeger:4317"
    tls:
      insecure: true
      insecure_skip_verify: true
#  otlp/dataprepper-traces:
#    endpoint: "dataprepper:21890"
#    tls:
#      insecure: true
#      insecure_skip_verify: true
#  otlp/dataprepper-metrics:
#    endpoint: "dataprepper:21891"
#    tls:
#      insecure: true
#      insecure_skip_verify: true
  otlp/dataprepper-logs:
    endpoint: "dataprepper:21892"
    tls:
      insecure: true
      insecure_skip_verify: true
  otlphttp/prometheus:
    endpoint: "http://prometheus:9090/api/v1/otlp"
    tls:
      insecure: true

processors:
  batch:
  filter/ottl:
    error_mode: ignore
    metrics:
      metric:
        # FIXME: remove when a Metrics View is implemented in the checkout and productcatalog components
        # or when this issue is resolved: https://github.com/open-telemetry/opentelemetry-go-contrib/issues/3071
        - 'name == "rpc.server.duration"'
  transform:
    metric_statements:
      - context: metric
        statements:
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-java/issues/4834
          - set(description, "") where name == "queueSize"
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-python-contrib/issues/1958
          - set(description, "") where name == "http.client.duration"

connectors:
  spanmetrics:

service:
  telemetry:
    logs:
      level: "warn"
    metrics:
      address: 127.0.0.1:8888
      level: detailed
      
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp, debug, spanmetrics]
    metrics:
      receivers: [otlp, spanmetrics, prometheus]
      processors: [filter/ottl, transform, batch]
      exporters: [otlphttp/prometheus, debug]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/dataprepper-logs, debug]
