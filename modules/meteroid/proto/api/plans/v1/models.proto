syntax = "proto3";

package meteroid.api.plans.v1;

enum PlanStatus {
  DRAFT = 0;
  ACTIVE = 1;
  INACTIVE = 2;
  ARCHIVED = 3;
}

enum PlanType {
  STANDARD = 0;
  FREE = 1;
  CUSTOM = 2;
  // template 3 ?
}

message PlanFilters {
  optional string search = 1;
  repeated PlanType types = 2;
  repeated PlanStatus statuses = 3;
}

message PlanBillingConfiguration {
  uint32 net_terms = 2;

  oneof service_period_start {
    DayOfMonth day_of_month = 3;
    SubscriptionAnniversary subscription_anniversary = 4;
  }

  message DayOfMonth {
    uint32 day_of_month = 1;
  }

  message SubscriptionAnniversary {}

  oneof billing_cycles {
    Fixed fixed = 6;
    Forever forever = 7;
  }

  message Fixed {
    uint32 count = 1;
  }
  message Forever {}
}

message TrialConfig {
  uint32 duration_days = 1;
  ActionAfterTrial action_after_trial = 2;
  // if true, nothing will be charged. If false, the normal plan price is charged from the start, no matter the plan that this trial gives access to.
  bool trial_is_free = 3;
  // what plan is applied after the trial completes and before any payment
  optional string downgrade_plan_id = 4;
  // what plan is applied during the trial (ex: Enterprise for X days after paying Pro plan). None for current plan
  optional string trialing_plan_id = 5;

  // advanced options :
  //  optional bool requires_pre_authorization = 6;
  // usage_credits, custom trial limits, etc

  enum ActionAfterTrial {
    BLOCK = 0;
    CHARGE = 1;
    DOWNGRADE = 2;
  }
}

message PlanVersion {
  string id = 1;
  bool is_draft = 2;
  uint32 version = 3;
  TrialConfig trial_config = 4;
  PlanBillingConfiguration billing_config = 5;
  string currency = 6;
  optional int32 period_start_day = 8;
  int32 net_terms = 9;
}

message ListPlanVersion {
  string id = 1;
  bool is_draft = 2;
  uint32 version = 3;
  string currency = 6;
  string created_at = 7;
}

message Metadata {
  string key = 1;
  string value = 2;
}

message Plan {
  string id = 1;
  string name = 2;
  string local_id = 3;
  optional string description = 4;
  PlanType plan_type = 5;
  PlanStatus plan_status = 6;
  //  string currency = 7;
  //  PlanVersion version = 8;
  optional string active_version_id = 11;
  optional string draft_version_id = 12;
}

message PlanOverview {
  string id = 1;
  string name = 2;
  string local_id = 3;
  optional string description = 4;
  PlanType plan_type = 5;
  PlanStatus plan_status = 6;
  string product_family_name = 7;
  ActiveVersionInfo active_version = 8;
  bool has_draft_version = 9;
  uint32 subscription_count = 10;

  message ActiveVersionInfo {
    uint32 version = 1;
    optional uint32 trial_duration_days = 2;
  }
}

message PlanWithVersion {
  Plan plan = 1;
  PlanVersion version = 2;
}

//message PlanOverview {
//  string plan_id = 1;
//  string plan_version_id = 2;
//  string name = 3;
//  uint32 version = 4;
//  optional string description = 5;
//  string currency = 6;
//  uint32 net_terms = 7;
//  string local_id = 8;
//  PlanType plan_type = 9;
//  bool is_draft = 10;
//  bool has_draft = 11;
//  optional string default_version_id = 12; // TODO we should get the version number here
//}

message PlanParameter {
  oneof param {
    BillingPeriodTerm billing_period_term = 1;
    CapacityThresholdValue capacity_threshold_value = 2;
    CommittedSlot committed_slot = 3;
  }

  message BillingPeriodTerm {}
  message CapacityThresholdValue {
    string component_id = 1;
    repeated uint64 capacity_values = 2;
  }
  message CommittedSlot {
    string component_id = 1;
  }
}


