syntax = "proto3";

package meteroid.api.subscriptions.v1;


import "api/subscriptions/v1/models.proto";
import "common/v1/pagination.proto";

message CreateSubscriptionsRequest {
  repeated CreateSubscription subscriptions = 1;
}

message CreateSubscriptionRequest {
  CreateSubscription subscription = 1;
}

message CreateSubscriptionsResponse {
  repeated CreatedSubscription subscriptions = 1;
}

message CreateSubscriptionResponse {
  CreatedSubscription subscription = 1;
}

message GetSubscriptionDetailsRequest {
  string subscription_id = 1;
}

message GetSubscriptionDetailsResponse {
  SubscriptionDetails subscription = 1;
}



message CancelSubscriptionRequest {
  string subscription_id = 1;
  optional string reason = 2;
  EffectiveAt effective_at = 3;

  enum EffectiveAt {
    BillingPeriodEnd = 0;
  }
}

message CancelSubscriptionResponse {
  Subscription subscription = 1;
}



message ListSubscriptionsRequest {
  optional string customer_id = 1;
  optional string plan_id = 2;
  meteroid.common.v1.Pagination pagination = 3;
}

message ListSubscriptionsResponse {
  repeated Subscription subscriptions = 1;
  meteroid.common.v1.PaginationResponse pagination_meta = 2;
}


message UpdateSlotsRequest {
  string subscription_id = 1;
  string price_component_id = 2;
  int32 delta = 3;
}

message UpdateSlotsResponse {
  uint32 current_value = 1;
}

message GetSlotsValueRequest {
  string subscription_id = 1;
  string unit = 2;
}

message GetSlotsValueResponse {
  uint32 current_value = 1;
  // uint32 next_period_value = 2; // TODO
}

message SyncToHubspotRequest {
  repeated string subscription_ids = 1;
}

message SyncToHubspotResponse {
}


// Service definition
service SubscriptionsService {
  rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse);
  rpc CreateSubscriptions(CreateSubscriptionsRequest) returns (CreateSubscriptionsResponse);
  rpc GetSubscriptionDetails(GetSubscriptionDetailsRequest) returns (SubscriptionDetails);
  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse);
  rpc UpdateSlots(UpdateSlotsRequest) returns (UpdateSlotsResponse);
  rpc GetSlotsValue(GetSlotsValueRequest) returns (GetSlotsValueResponse);
  rpc CancelSubscription(CancelSubscriptionRequest) returns (CancelSubscriptionResponse);
  rpc SyncToHubspot(SyncToHubspotRequest) returns (SyncToHubspotResponse);
}
