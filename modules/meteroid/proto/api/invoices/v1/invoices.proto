syntax = "proto3";

package meteroid.api.invoices.v1;

import "api/invoices/v1/models.proto";
import "common/v1/pagination.proto";

message ListInvoicesRequest {
  enum SortBy {
    DATE_DESC = 0;
    DATE_ASC = 1;
    ID_DESC = 2;
    ID_ASC = 3;
  }
  SortBy sort_by = 1;
  optional string search = 2;
  meteroid.common.v1.Pagination pagination = 3;
  optional InvoiceStatus status = 4;
  optional string customer_id = 5;
  optional string subscription_id = 6;
}

message ListInvoicesResponse {
  repeated Invoice invoices = 1;
  meteroid.common.v1.PaginationResponse pagination_meta = 2;
}

message GetInvoiceRequest {
  string id = 1;
}

message GetInvoiceResponse {
  DetailedInvoice invoice = 1;
}

message RefreshInvoiceDataRequest {
  string id = 1;
}

message RefreshInvoiceDataResponse {
  DetailedInvoice invoice = 1;
}

message PreviewInvoiceRequest {
  string id = 1;
}

message PreviewInvoiceResponse {
  // TODO could be too big for a single response, use streaming ? or not grpc
  string html = 1;
}

message RequestPdfGenerationRequest {
  string id = 1;
}

message RequestPdfGenerationResponse {}

message SyncToPennylaneRequest {
  repeated string invoice_ids = 1;
}

message SyncToPennylaneResponse {
}

service InvoicesService {
  rpc ListInvoices(ListInvoicesRequest) returns (ListInvoicesResponse) {}
  rpc GetInvoice(GetInvoiceRequest) returns (GetInvoiceResponse) {}
  rpc PreviewInvoiceHtml(PreviewInvoiceRequest) returns (PreviewInvoiceResponse) {}
  rpc RequestPdfGeneration(RequestPdfGenerationRequest) returns (RequestPdfGenerationResponse) {}
  rpc RefreshInvoiceData(RefreshInvoiceDataRequest) returns (RefreshInvoiceDataResponse) {}
  rpc SyncToPennylane(SyncToPennylaneRequest) returns (SyncToPennylaneResponse) {}
}
