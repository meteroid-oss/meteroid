syntax = "proto3";

package meteroid.api.invoices.v1;

import "api/customers/v1/models.proto";
import "api/connectors/v1/models.proto";

enum InvoiceStatus {
  DRAFT = 0;
  FINALIZED = 1;
  // PAID/ISSUED ?
  UNCOLLECTIBLE = 2;
  VOID = 3;
}

enum InvoicePaymentStatus {
  UNPAID = 0;
  PARTIALLY_PAID = 1;
  PAID = 2;
  ERRORED = 3;
}

message Invoice {
  string id = 1;
  string invoice_number = 2;
  InvoiceStatus status = 3;
  string invoice_date = 4;
  string customer_id = 5;
  string customer_name = 6;
  optional string subscription_id = 7;
  string currency = 8;
  optional string due_at = 9;
  int64 total = 10;
  InvoicePaymentStatus payment_status = 11;
  bool manual = 12;
}

//message Account {
//  string id = 1;
//  string name = 2;
//  optional string email = 3;
//  api.customers.v1.Address address = 4;
//}

message InlineCustomer {
  string id = 1;
  string name = 2;
  api.customers.v1.Address billing_address = 3;
  string snapshot_at = 4;
  optional string vat_number = 5;
  optional string email = 6;
}

message DetailedInvoice {
  string id = 1;
  InvoiceStatus status = 2;
  //  optional InvoiceExternalStatusEnum external_status = 3;
  string created_at = 4;
  optional string updated_at = 5;
  string tenant_id = 6;
  string customer_id = 7;
  optional string subscription_id = 8;
  string currency = 9;
  string invoice_number = 11;
  repeated LineItem line_items = 13;
  repeated CouponLineItem coupon_line_items = 15;
  optional string data_updated_at = 18;
  string invoice_date = 19;
  optional string plan_version_id = 20;
  InvoiceType invoice_type = 21;
  optional string finalized_at = 22;
  int64 subtotal = 23;
  int64 subtotal_recurring = 24;
  repeated TaxBreakdownItem tax_breakdown = 25;
  int64 tax_amount = 26;
  int64 total = 27;
  int64 amount_due = 28;
  int32 net_terms = 29;
  optional string reference = 30;
  optional string memo = 31;
  string local_id = 32;
  optional string due_at = 33;
  optional string plan_name = 34;
  InlineCustomer customer_details = 35;
  int64 applied_credits = 36;
  optional string document_sharing_key = 37;
  optional string pdf_document_id = 38;
  optional string xml_document_id = 39;
  optional api.connectors.v1.ConnectionMetadata connection_metadata = 40;
  InvoicePaymentStatus payment_status = 41;
  repeated Transaction transactions = 42;
  optional string paid_at = 43;
  bool manual = 44;
  optional string purchase_order = 45;
  optional string voided_at = 46;
  optional string marked_as_uncollectible_at = 47;
}

message TaxBreakdownItem {
  string name = 1;
  string tax_rate = 2;
  int64 amount = 3;
}

message CouponLineItem {
  string coupon_id = 1;
  string name = 2;
  int64 total = 3;
}

message LineItem {
  string id = 1;
  string name = 2;
  int64 subtotal = 3;
  string tax_rate = 4;

  optional string unit_price = 5;

  string start_date = 8;
  string end_date = 9;
  optional string quantity = 10;


  //  Minimum minimum = 1;
  //  Discount discount = 1;
  repeated SubLineItem sub_line_items = 11;
  bool is_prorated = 12;

  optional string price_component_id = 13;
  optional string product_id = 14;
  optional string metric_id = 15; // TODO same as product id ?
  optional string description = 16;


}

message SubLineItem {
  string id = 1;
  string name = 2;
  int64 total = 3;
  string quantity = 4;
  string unit_price = 5;

  oneof subline_attributes {
    TieredOrVolume tiered = 6;
    TieredOrVolume volume = 7;
    Matrix matrix = 8;
    Package package = 9;
  }

  message TieredOrVolume {
    uint64 first_unit = 1;
    optional uint64 last_unit = 2;
    optional string flat_cap = 3;
    optional string flat_fee = 4;
  }

  message Matrix {
    string dimension1_key = 1;
    string dimension1_value = 2;
    optional string dimension2_key = 3;
    optional string dimension2_value = 4;
  }

  message Package {
    string raw_usage = 1;
  }
}

enum InvoiceType {
  RECURRING = 0;
  ONE_OFF = 1;
  ADJUSTMENT = 2;
  USAGE_THRESHOLD = 3;
}


message Transaction {
  string id = 1;
  optional string provider_transaction_id = 2;
  optional string payment_method_id = 3;
  uint64 amount = 4;
  string currency = 5;
  string invoice_id = 6;
  optional string error = 7;
  PaymentStatusEnum status = 8;
  PaymentTypeEnum payment_type = 9;
  optional string processed_at = 10;
  optional PaymentMethodInfo payment_method_info = 11;

  enum PaymentStatusEnum {
    READY = 0;
    PENDING = 1;
    SETTLED = 2;
    CANCELLED = 3;
    FAILED = 4;
  }

  enum PaymentTypeEnum {
    PAYMENT = 0;
    REFUND = 1;
  }
}

message PaymentMethodInfo {
  PaymentMethodTypeEnum payment_method_type = 1;
  optional string card_brand = 2;
  optional string card_last4 = 3;
  optional string account_number_hint = 4;

  enum PaymentMethodTypeEnum {
    CARD = 0;
    BANK_TRANSFER = 1;
    WALLET = 2;
    OTHER = 3;
  }
}

message NewInvoiceLineItem {
  string product = 1;
  string start_date = 2;
  string end_date = 3;
  string quantity = 4;
  string unit_price = 5;
  string tax_rate = 6;
}

message NewInvoice {
  string customer_id = 1;
  string invoice_date = 2;
  optional string due_date = 3;
  string currency = 4;
  optional string purchase_order = 5;
  repeated NewInvoiceLineItem line_items = 6;
  optional string discount = 7;
}
