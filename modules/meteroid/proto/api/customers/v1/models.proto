syntax = "proto3";

package meteroid.api.customers.v1;

import "google/protobuf/timestamp.proto";


message CustomerBrief {
  string id = 1;
  string name = 2;
  optional string billing_email = 3;
  optional string alias = 4;
  optional string country = 5;
  string created_at = 6;
  string local_id = 7;
}

message Address {
  optional string line1 = 1;
  optional string line2 = 2;
  optional string city = 3;
  optional string country = 4;
  optional string state = 5;
  optional string zipCode = 6;
}

message ShippingAddress {
  Address address = 1;
  bool sameAsBilling = 7;
}

message Customer {
  string id = 1;
  string name = 2;
  optional string billing_email = 3;
  optional string alias = 4;
  repeated string invoicing_emails = 6;
  optional string phone = 7;
  int32 balance_value_cents = 8;
  string currency = 9;
  optional google.protobuf.Timestamp archived_at = 10;
  optional google.protobuf.Timestamp created_at = 11;
  optional Address billing_address = 12;
  optional ShippingAddress shipping_address = 13;
  string invoicing_entity_id = 14;
  string local_id = 15;
  optional string vat_number = 16;

}

message CustomerNew {
  string name = 2;
  optional string billing_email = 3;
  optional string alias = 4;
  repeated string invoicing_emails = 6;
  optional string phone = 7;
  string currency = 9;
  optional Address billing_address = 12;
  optional ShippingAddress shipping_address = 13;
  optional string invoicing_entity_id = 14;
}


// TODO need better patch mechanism / need to check empty (diesel option<option<>>)
message PatchCustomer {
  string id = 10;
  optional string name = 1;
  optional string billing_email = 2;
  optional string alias = 3;
  InvoicingEmails invoicing_emails = 4;
  optional string phone = 5;
  optional int32 balance_value_cents = 6;
  optional string currency = 7;
  optional Address billing_address = 8;
  optional ShippingAddress shipping_address = 9;
  optional string invoicing_entity_id = 14;
  optional string vat_number = 15;

  message InvoicingEmails {
    repeated string emails = 1;
  }
}

message CustomerPaymentMethod {
  string id = 1;
  string customer_id = 2;
  optional string connection_id = 3;
  PaymentMethodTypeEnum payment_method_type = 8;
  optional string card_brand = 9;
  optional string card_last4 = 10;
  optional int32 card_exp_month = 11;
  optional int32 card_exp_year = 12;
  optional string account_number_hint = 13;

  enum PaymentMethodTypeEnum {
    CARD = 0;
    TRANSFER = 1;
    DIRECT_DEBIT_SEPA = 2;
    DIRECT_DEBIT_ACH = 3;
    DIRECT_DEBIT_BACS = 4;
    OTHER = 5;
  }


}

