syntax = "proto3";

package meteroid.api.customers.v1;

import "api/customers/v1/models.proto";
import "api/invoices/v1/models.proto";
import "common/v1/pagination.proto";

message CreateCustomerRequest {
  CustomerNew data = 1;
}

message CreateCustomerResponse {
  CustomerBrief customer = 1;
}

message PatchCustomerRequest {
  PatchCustomer customer = 1;
}

message PatchCustomerResponse {}

message ListCustomerRequest {
  optional string search = 1;
  SortBy sort_by = 2;
  meteroid.common.v1.Pagination pagination = 3;

  enum SortBy {
    DATE_DESC = 0;
    DATE_ASC = 1;
    NAME_DESC = 2;
    NAME_ASC = 3;
  }
}
message ListCustomerResponse {
  repeated CustomerBrief customers = 1;
  meteroid.common.v1.PaginationResponse pagination_meta = 2;
}

message GetCustomerByIdRequest {
  string id = 1;
}
message GetCustomerByIdResponse {
  Customer customer = 1;
}

message GetCustomerByAliasRequest {
  string alias = 1;
}
message GetCustomerByAliasResponse {
  Customer customer = 1;
}

message TopUpCustomerBalanceRequest {
  string customer_id = 1;
  int32 cents = 2;
  optional string notes = 3;
}

message TopUpCustomerBalanceResponse {
  Customer customer = 1;
}

message BuyCustomerCreditsRequest {
  string customer_id = 1;
  int32 cents = 2;
  optional string notes = 3;
}

message BuyCustomerCreditsResponse {
  api.invoices.v1.DetailedInvoice invoice = 1;
}

message ArchiveCustomerRequest {
  string id = 1;
}

message ArchiveCustomerResponse {}

message SyncToHubspotRequest {
  repeated string customer_ids = 1;
}

message SyncToHubspotResponse {
}

service CustomersService {
  rpc CreateCustomer(CreateCustomerRequest) returns (CreateCustomerResponse) {}
  rpc PatchCustomer(PatchCustomerRequest) returns (PatchCustomerResponse) {}
  rpc ListCustomers(ListCustomerRequest) returns (ListCustomerResponse) {}
  rpc GetCustomerById(GetCustomerByIdRequest) returns (GetCustomerByIdResponse) {}
  rpc GetCustomerByAlias(GetCustomerByAliasRequest) returns (GetCustomerByAliasResponse) {}
  rpc TopUpCustomerBalance(TopUpCustomerBalanceRequest) returns (TopUpCustomerBalanceResponse) {}
  rpc BuyCustomerCredits(BuyCustomerCreditsRequest) returns (BuyCustomerCreditsResponse) {}
  rpc ArchiveCustomer(ArchiveCustomerRequest) returns (ArchiveCustomerResponse) {}
  rpc SyncToHubspot(SyncToHubspotRequest) returns (SyncToHubspotResponse) {}
}
